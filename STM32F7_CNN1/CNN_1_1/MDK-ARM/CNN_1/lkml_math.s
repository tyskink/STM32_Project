; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --split_sections --debug -c --asm -ocnn_1\lkml_math.o --depend=cnn_1\lkml_math.d --cpu=Cortex-M7.fp.sp --apcs=interwork -O0 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F7xx_HAL_Driver/Inc -I../Drivers/STM32F7xx_HAL_Driver/Inc/Legacy -I../Middlewares/Third_Party/FatFs/src/drivers -I../Drivers/CMSIS/Device/ST/STM32F7xx/Include -I../Middlewares/Third_Party/FatFs/src -I../Drivers/CMSIS/Include -I..\..\..\..\STM32_Project -I..\..\..\STM32F7_Project -I..\..\..\..\LKML_C\Src -I..\..\..\..\LKML_C -I.\RTE\_CNN_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F746xx -DUSE_HAL_DRIVER -DSTM32F746xx --omf_browse=cnn_1\lkml_math.crf ..\..\..\..\LKML_C\Src\LKML_Math.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||i.LK_FullyConnect||, CODE, READONLY, ALIGN=1

LK_FullyConnect PROC
        PUSH     {r4-r7,lr}
        LDRD     r4,r7,[sp,#0x14]
        MOVS     r5,#0
        B        |L1.60|
|L1.10|
        VLDR     s0,[r7,#0]
        VSTR     s0,[r4,#0]
        MOVS     r6,#0
        B        |L1.48|
|L1.22|
        VLDR     s0,[r4,#0]
        VLDR     s1,[r3,#0]
        VLDR     s2,[r0,#0]
        VMLA.F32 s0,s1,s2
        VSTR     s0,[r4,#0]
        ADDS     r3,r3,#4
        ADDS     r0,r0,#4
        ADDS     r6,r6,#1
|L1.48|
        CMP      r6,r2
        BLT      |L1.22|
        SUB      r3,r3,r2,LSL #2
        ADDS     r4,r4,#4
        ADDS     r5,r5,#1
|L1.60|
        CMP      r5,r1
        BLT      |L1.10|
        POP      {r4-r7,pc}
        ENDP


        AREA ||i.LK_Padding||, CODE, READONLY, ALIGN=1

LK_Padding PROC
        PUSH     {r4-r8,lr}
        MOV      r4,r0
        LDRD     r12,r6,[sp,#0x1c]
        LDR      r5,[sp,#0x18]
        MUL      r0,r5,r6
        ADD      r0,r3,r0,LSL #2
        ADD      r3,r0,r6,LSL #2
        MOVS     r7,#0
        B        |L2.64|
|L2.28|
        MOVS     r0,#0
        B        |L2.50|
|L2.32|
        ADD      r8,r4,r0,LSL #2
        VLDR     s0,[r8,#0]
        ADD      r8,r3,r0,LSL #2
        VSTR     s0,[r8,#0]
        ADDS     r0,r0,#1
|L2.50|
        CMP      r0,r1
        BLT      |L2.32|
        ADD      r3,r3,r5,LSL #2
        ADD      r4,r4,r1,LSL #2
        ADDS     r7,r7,#1
|L2.64|
        CMP      r7,r2
        BLT      |L2.28|
        POP      {r4-r8,pc}
        ENDP


        AREA ||i.LK_Pooling_Max||, CODE, READONLY, ALIGN=2

LK_Pooling_Max PROC
        PUSH     {r4-r11,lr}
        MOV      r12,r2
        MOV      r9,r3
        LDRD     r8,r6,[sp,#0x24]
        LDRD     r7,r4,[sp,#0x2c]
        VLDR     s2,|L3.148|
        VSTR     s2,[r4,#0]
        MOV      r10,#0
        B        |L3.140|
|L3.30|
        MOV      r11,#0
        B        |L3.126|
|L3.36|
        MOVS     r3,#0
        B        |L3.90|
|L3.40|
        MOVS     r5,#0
        B        |L3.84|
|L3.44|
        MUL      lr,r3,r1
        ADD      lr,r0,lr,LSL #2
        ADD      r2,lr,r5,LSL #2
        VLDR     s2,[r2,#0]
        VLDR     s3,[r4,#0]
        VCMPE.F32 s2,s3
        VMRS     APSR_nzcv,FPSCR
        BLE      |L3.82|
        VLDR     s2,[r2,#0]
        VSTR     s2,[r4,#0]
|L3.82|
        ADDS     r5,r5,#1
|L3.84|
        CMP      r5,r9
        BLT      |L3.44|
        ADDS     r3,r3,#1
|L3.90|
        CMP      r3,r8
        BLT      |L3.40|
        VLDR     s3,[r4,#0]
        VMOV.F32 s2,s1
        VMLA.F32 s2,s0,s3
        VSTR     s2,[r4,#0]
        ADDS     r4,r4,#4
        VLDR     s2,|L3.148|
        VSTR     s2,[r4,#0]
        ADD      r0,r0,r6,LSL #2
        ADD      r11,r11,r6
|L3.126|
        CMP      r11,r1
        BLT      |L3.36|
        SUBS     r3,r7,#1
        MULS     r3,r1,r3
        ADD      r0,r0,r3,LSL #2
        ADD      r10,r10,r7
|L3.140|
        CMP      r10,r12
        BLT      |L3.30|
        POP      {r4-r11,pc}
        ENDP

|L3.148|
        DCFS     0x00000000 ; 0

        AREA ||i.LK_ReLu||, CODE, READONLY, ALIGN=2

LK_ReLu PROC
        B        |L4.26|
|L4.2|
        VLDR     s0,[r0,#0]
        VCMPE.F32 s0,#0.0
        VMRS     APSR_nzcv,FPSCR
        BCS      |L4.24|
        VLDR     s0,|L4.36|
        VSTR     s0,[r0,#0]
|L4.24|
        ADDS     r0,r0,#4
|L4.26|
        SUBS     r2,r1,#0
        SUB      r1,r1,#1
        BNE      |L4.2|
        BX       lr
        ENDP

|L4.36|
        DCFS     0x00000000 ; 0

        AREA ||i.LK_Softmax||, CODE, READONLY, ALIGN=2

LK_Softmax PROC
        PUSH     {r4-r6,lr}
        VPUSH    {d8}
        MOV      r4,r0
        MOV      r5,r1
        VLDR     s0,|L5.88|
        VMOV.F32 s16,s0
        MOVS     r6,#0
        B        |L5.54|
|L5.22|
        VLDR     s1,[r4,#0]
        VMOV.F32 s0,s1
        BL       __hardfp_exp2f
        VSTR     s0,[r4,#0]
        VLDR     s0,[r4,#0]
        VADD.F32 s0,s0,s16
        VMOV.F32 s16,s0
        ADDS     r4,r4,#4
        ADDS     r6,r6,#1
|L5.54|
        CMP      r6,r5
        BLT      |L5.22|
        MOVS     r0,#0
        B        |L5.78|
|L5.62|
        SUBS     r4,r4,#4
        VLDR     s0,[r4,#0]
        VDIV.F32 s1,s0,s16
        VSTR     s1,[r4,#0]
        ADDS     r0,r0,#1
|L5.78|
        CMP      r0,r5
        BLT      |L5.62|
        VPOP     {d8}
        POP      {r4-r6,pc}
        ENDP

|L5.88|
        DCFS     0x00000000 ; 0

        AREA ||i.LK_ZeroCenter||, CODE, READONLY, ALIGN=1

LK_ZeroCenter PROC
        PUSH     {r4,lr}
        B        |L6.24|
|L6.4|
        VLDR     s0,[r0,#0]
        VLDR     s1,[r1,#0]
        VADD.F32 s0,s0,s1
        VSTR     s0,[r0,#0]
        ADDS     r0,r0,#4
        ADDS     r1,r1,#4
|L6.24|
        SUBS     r3,r2,#0
        SUB      r2,r2,#1
        BNE      |L6.4|
        POP      {r4,pc}
        ENDP


        AREA ||i.LK_convolutional2D||, CODE, READONLY, ALIGN=1

LK_convolutional2D PROC
        PUSH     {r4-r11,lr}
        MOV      r7,r0
        MOV      r5,r1
        LDRD     r6,r12,[sp,#0x24]
        LDRD     r8,r9,[sp,#0x30]
        LDR      r4,[sp,#0x2c]
        MOVS     r2,#0
        B        |L7.120|
|L7.22|
        MOV      r10,#0
        B        |L7.114|
|L7.28|
        VSTR     s0,[r4,#0]
        MOVS     r0,#0
        B        |L7.104|
|L7.36|
        MOVS     r1,#0
        B        |L7.98|
|L7.40|
        MUL      r11,r2,r5
        ADD      r11,r7,r11,LSL #2
        ADD      r11,r11,r10,LSL #2
        MUL      lr,r0,r5
        ADD      r11,r11,lr,LSL #2
        ADD      r11,r11,r1,LSL #2
        VLDR     s2,[r11,#0]
        MUL      r11,r0,r6
        ADD      r11,r3,r11,LSL #2
        ADD      r11,r11,r1,LSL #2
        VLDR     s3,[r11,#0]
        VLDR     s1,[r4,#0]
        VMLA.F32 s1,s2,s3
        VSTR     s1,[r4,#0]
        ADDS     r1,r1,#1
|L7.98|
        CMP      r1,r6
        BLT      |L7.40|
        ADDS     r0,r0,#1
|L7.104|
        CMP      r0,r12
        BLT      |L7.36|
        ADDS     r4,r4,#4
        ADD      r10,r10,#1
|L7.114|
        CMP      r10,r8
        BLT      |L7.28|
        ADDS     r2,r2,#1
|L7.120|
        CMP      r2,r9
        BLT      |L7.22|
        POP      {r4-r11,pc}
        ENDP


        AREA ||i.LK_convolutional2D_Relu||, CODE, READONLY, ALIGN=2

LK_convolutional2D_Relu PROC
        PUSH     {r4-r11,lr}
        MOV      r7,r0
        MOV      r5,r1
        LDRD     r6,r12,[sp,#0x24]
        LDRD     r8,r9,[sp,#0x30]
        LDR      r4,[sp,#0x2c]
        MOVS     r2,#0
        B        |L8.142|
|L8.22|
        MOV      r10,#0
        B        |L8.136|
|L8.28|
        VSTR     s0,[r4,#0]
        MOVS     r0,#0
        B        |L8.104|
|L8.36|
        MOVS     r1,#0
        B        |L8.98|
|L8.40|
        MUL      r11,r2,r5
        ADD      r11,r7,r11,LSL #2
        ADD      r11,r11,r10,LSL #2
        MUL      lr,r0,r5
        ADD      r11,r11,lr,LSL #2
        ADD      r11,r11,r1,LSL #2
        VLDR     s2,[r11,#0]
        MUL      r11,r0,r6
        ADD      r11,r3,r11,LSL #2
        ADD      r11,r11,r1,LSL #2
        VLDR     s3,[r11,#0]
        VLDR     s1,[r4,#0]
        VMLA.F32 s1,s2,s3
        VSTR     s1,[r4,#0]
        ADDS     r1,r1,#1
|L8.98|
        CMP      r1,r6
        BLT      |L8.40|
        ADDS     r0,r0,#1
|L8.104|
        CMP      r0,r12
        BLT      |L8.36|
        VLDR     s1,[r4,#0]
        VCMPE.F32 s1,#0.0
        VMRS     APSR_nzcv,FPSCR
        BCS      |L8.130|
        VLDR     s1,|L8.152|
        VSTR     s1,[r4,#0]
|L8.130|
        ADDS     r4,r4,#4
        ADD      r10,r10,#1
|L8.136|
        CMP      r10,r8
        BLT      |L8.28|
        ADDS     r2,r2,#1
|L8.142|
        CMP      r2,r9
        BLT      |L8.22|
        POP      {r4-r11,pc}
        ENDP

        DCW      0x0000
|L8.152|
        DCFS     0x00000000 ; 0

        AREA ||i.LK_convolutional2D_prepara||, CODE, READONLY, ALIGN=1

LK_convolutional2D_prepara PROC
        PUSH     {r4-r11,lr}
        LDRD     r12,r8,[sp,#0x34]
        LDR      r9,[sp,#0x3c]
        LDRD     r4,r7,[sp,#0x2c]
        LDRD     r5,r6,[sp,#0x24]
        MOVS     r1,#0
        B        |L9.116|
|L9.24|
        MOVS     r2,#0
        B        |L9.104|
|L9.28|
        VSTR     s0,[r4,#0]
        MOV      r10,#0
        B        |L9.84|
|L9.38|
        MOV      r11,#0
        B        |L9.72|
|L9.44|
        VLDR     s1,[r4,#0]
        VLDR     s2,[r0,#0]
        VLDR     s3,[r3,#0]
        VMLA.F32 s1,s2,s3
        VSTR     s1,[r4,#0]
        ADDS     r3,r3,#4
        ADDS     r0,r0,#4
        ADD      r11,r11,#1
|L9.72|
        CMP      r11,r5
        BLT      |L9.44|
        ADD      r0,r0,r8,LSL #2
        ADD      r10,r10,#1
|L9.84|
        CMP      r10,r6
        BLT      |L9.38|
        ADDS     r4,r4,#4
        SUB      r0,r0,r9,LSL #2
        LDR      r10,[sp,#0x44]
        SUB      r3,r3,r10,LSL #2
        ADDS     r2,r2,#1
|L9.104|
        CMP      r2,r7
        BLT      |L9.28|
        LDR      r2,[sp,#0x40]
        ADD      r0,r0,r2,LSL #2
        ADDS     r1,r1,#1
|L9.116|
        CMP      r1,r12
        BLT      |L9.24|
        POP      {r4-r11,pc}
        ENDP


        AREA ||i.LK_matrix_addition||, CODE, READONLY, ALIGN=1

LK_matrix_addition PROC
        PUSH     {r4,lr}
        B        |L10.24|
|L10.4|
        VLDR     s0,[r0,#0]
        VLDR     s1,[r1,#0]
        VADD.F32 s0,s0,s1
        VSTR     s0,[r0,#0]
        ADDS     r0,r0,#4
        ADDS     r1,r1,#4
|L10.24|
        SUBS     r3,r2,#0
        SUB      r2,r2,#1
        BNE      |L10.4|
        POP      {r4,pc}
        ENDP


        AREA ||i.LK_matrix_multpile||, CODE, READONLY, ALIGN=1

LK_matrix_multpile PROC
        PUSH     {r4-r11,lr}
        MOV      r6,r0
        MOV      r7,r1
        MOV      r5,r2
        LDRD     r4,r12,[sp,#0x28]
        LDR      r8,[sp,#0x24]
        MOV      r10,#0
        MOV      r11,r10
        MOV      r9,r10
        MOVS     r0,#0
        B        |L11.108|
|L11.30|
        MOVS     r1,#0
        B        |L11.102|
|L11.34|
        MUL      r2,r0,r5
        ADD      r10,r6,r2,LSL #2
        ADD      r11,r3,r1,LSL #2
        MUL      r2,r0,r4
        ADD      r2,r12,r2,LSL #2
        ADD      r9,r2,r1,LSL #2
        MOVS     r2,#0
        B        |L11.96|
|L11.62|
        VLDR     s0,[r9,#0]
        ADD      lr,r10,r2,LSL #2
        VLDR     s1,[lr,#0]
        MUL      lr,r2,r4
        ADD      lr,r11,lr,LSL #2
        VLDR     s2,[lr,#0]
        VMLA.F32 s0,s1,s2
        VSTR     s0,[r9,#0]
        ADDS     r2,r2,#1
|L11.96|
        CMP      r2,r5
        BLT      |L11.62|
        ADDS     r1,r1,#1
|L11.102|
        CMP      r1,r4
        BLT      |L11.34|
        ADDS     r0,r0,#1
|L11.108|
        CMP      r0,r7
        BLT      |L11.30|
        POP      {r4-r11,pc}
        ENDP


        AREA ||i.LK_maxofMatrix||, CODE, READONLY, ALIGN=2

LK_maxofMatrix PROC
        PUSH     {r4,lr}
        MOV      r2,r0
        MOV      r3,r1
        VLDR     s1,|L12.72|
        VMOV.F32 s0,s1
        MOVS     r1,#0
        MOVS     r0,#0
        B        |L12.54|
|L12.20|
        ADD      r4,r2,r0,LSL #2
        VLDR     s1,[r4,#0]
        VCMPE.F32 s1,s0
        VMRS     APSR_nzcv,FPSCR
        BLE      |L12.52|
        ADD      r4,r2,r0,LSL #2
        VLDR     s1,[r4,#0]
        VMOV.F32 s0,s1
        MOV      r1,r0
|L12.52|
        ADDS     r0,r0,#1
|L12.54|
        CMP      r0,r3
        BLT      |L12.20|
        CMP      r1,#9
        BNE      |L12.66|
        MOVS     r1,#0
        B        |L12.68|
|L12.66|
        ADDS     r1,r1,#1
|L12.68|
        MOV      r0,r1
        POP      {r4,pc}
        ENDP

|L12.72|
        DCFS     0x00000000 ; 0

        AREA ||i.LK_sigmoid||, CODE, READONLY, ALIGN=1

LK_sigmoid PROC
        PUSH     {r4-r6,lr}
        MOV      r5,r0
        MOV      r6,r1
        MOVS     r4,#0
        B        |L13.36|
|L13.10|
        ADD      r0,r5,r4,LSL #2
        VLDR     s1,[r0,#0]
        VMOV.F32 s0,s1
        BL       sigmoid
        ADD      r0,r5,r4,LSL #2
        VSTR     s0,[r0,#0]
        ADDS     r4,r4,#1
|L13.36|
        CMP      r4,r6
        BLT      |L13.10|
        POP      {r4-r6,pc}
        ENDP


        AREA ||i.ReLU_1||, CODE, READONLY, ALIGN=2

ReLU_1 PROC
        VLDR     s0,[r0,#0]
        VCMPE.F32 s0,#0.0
        VMRS     APSR_nzcv,FPSCR
        BLE      |L14.20|
        VLDR     s0,[r0,#0]
|L14.18|
        BX       lr
|L14.20|
        VLDR     s0,|L14.28|
        B        |L14.18|
        ENDP

        DCW      0x0000
|L14.28|
        DCFS     0x00000000 ; 0

        AREA ||i.ReLU_2||, CODE, READONLY, ALIGN=2

ReLU_2 PROC
        VMOV.F32 s1,s0
        VCMPE.F32 s1,#0.0
        VMRS     APSR_nzcv,FPSCR
        BLE      |L15.20|
        VMOV.F32 s0,s1
|L15.18|
        BX       lr
|L15.20|
        VLDR     s0,|L15.28|
        B        |L15.18|
        ENDP

        DCW      0x0000
|L15.28|
        DCFS     0x00000000 ; 0

        AREA ||i.ReLu||, CODE, READONLY, ALIGN=2

ReLu PROC
        VLDR     s0,|L16.8|
        BX       lr
        ENDP

        DCW      0x0000
|L16.8|
        DCFS     0x00000000 ; 0

        AREA ||i.matrix_multpile||, CODE, READONLY, ALIGN=1

matrix_multpile PROC
        PUSH     {r4-r11,lr}
        MOV      r6,r0
        MOV      r7,r1
        MOV      r5,r2
        LDRD     r4,r12,[sp,#0x28]
        LDR      r8,[sp,#0x24]
        MOV      r10,#0
        MOV      r11,r10
        MOV      r9,r10
        MOVS     r0,#0
        B        |L17.108|
|L17.30|
        MOVS     r1,#0
        B        |L17.102|
|L17.34|
        MUL      r2,r0,r5
        ADD      r10,r6,r2,LSL #2
        ADD      r11,r3,r1,LSL #2
        MUL      r2,r0,r4
        ADD      r2,r12,r2,LSL #2
        ADD      r9,r2,r1,LSL #2
        MOVS     r2,#0
        B        |L17.96|
|L17.62|
        VLDR     s0,[r9,#0]
        ADD      lr,r10,r2,LSL #2
        VLDR     s1,[lr,#0]
        MUL      lr,r2,r4
        ADD      lr,r11,lr,LSL #2
        VLDR     s2,[lr,#0]
        VMLA.F32 s0,s1,s2
        VSTR     s0,[r9,#0]
        ADDS     r2,r2,#1
|L17.96|
        CMP      r2,r5
        BLT      |L17.62|
        ADDS     r1,r1,#1
|L17.102|
        CMP      r1,r4
        BLT      |L17.34|
        ADDS     r0,r0,#1
|L17.108|
        CMP      r0,r7
        BLT      |L17.30|
        POP      {r4-r11,pc}
        ENDP


        AREA ||i.maxofMatrix||, CODE, READONLY, ALIGN=2

maxofMatrix PROC
        PUSH     {r4,lr}
        MOV      r2,r0
        VLDR     s1,|L18.60|
        VMOV.F32 s0,s1
        MOVS     r3,#0
        MOVS     r0,#0
        B        |L18.52|
|L18.18|
        ADD      r4,r2,r0,LSL #2
        VLDR     s1,[r4,#0]
        VCMPE.F32 s1,s0
        VMRS     APSR_nzcv,FPSCR
        BLE      |L18.50|
        ADD      r4,r2,r0,LSL #2
        VLDR     s1,[r4,#0]
        VMOV.F32 s0,s1
        MOV      r3,r0
|L18.50|
        ADDS     r0,r0,#1
|L18.52|
        CMP      r0,r1
        BLT      |L18.18|
        MOV      r0,r3
        POP      {r4,pc}
        ENDP

|L18.60|
        DCFS     0x00000000 ; 0

        AREA ||i.sigmoid||, CODE, READONLY, ALIGN=1

sigmoid PROC
        PUSH     {r4,lr}
        VPUSH    {d8-d11}
        VMOV.F32 s16,s0
        VNEG.F32 s0,s16
        VMOV     r0,s0
        BL       __aeabi_f2d
        VMOV     d11,r0,r1
        VMOV.F32 s0,s22
        VMOV.F32 s1,s23
        BL       __hardfp_exp
        VMOV.F32 s20,s0
        VMOV.F32 s21,s1
        VMOV     r0,r1,d10
        BL       __aeabi_d2f
        VMOV     s17,r0
        VMOV.F32 s0,#1.00000000
        VADD.F32 s0,s17,s0
        VMOV.F32 s1,#1.00000000
        VDIV.F32 s2,s1,s0
        VMOV.F32 s18,s2
        VMOV.F32 s0,s18
        VPOP     {d8-d11}
        POP      {r4,pc}
        ENDP


        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        EXPORT LK_FullyConnect [CODE]
        EXPORT LK_Padding [CODE]
        EXPORT LK_Pooling_Max [CODE]
        EXPORT LK_ReLu [CODE]
        EXPORT LK_Softmax [CODE]
        EXPORT LK_ZeroCenter [CODE]
        EXPORT LK_convolutional2D [CODE]
        EXPORT LK_convolutional2D_Relu [CODE]
        EXPORT LK_convolutional2D_prepara [CODE]
        EXPORT LK_matrix_addition [CODE]
        EXPORT LK_matrix_multpile [CODE]
        EXPORT LK_maxofMatrix [CODE]
        EXPORT LK_sigmoid [CODE]
        EXPORT ReLU_1 [CODE]
        EXPORT ReLU_2 [CODE]
        EXPORT ReLu [CODE]
        EXPORT matrix_multpile [CODE]
        EXPORT maxofMatrix [CODE]
        EXPORT sigmoid [CODE]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT __aeabi_f2d [CODE]
        IMPORT __hardfp_exp [CODE]
        IMPORT __aeabi_d2f [CODE]
        IMPORT __hardfp_exp2f [CODE]

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,6
        ATTR SETSTRING Tag_conformance,"2.09"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
