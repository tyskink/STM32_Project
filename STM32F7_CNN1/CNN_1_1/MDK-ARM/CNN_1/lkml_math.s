; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --split_sections --debug -c --asm -ocnn_1\lkml_math.o --depend=cnn_1\lkml_math.d --cpu=Cortex-M7 --fpu=SoftVFP --apcs=interwork -O3 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F7xx_HAL_Driver/Inc -I../Drivers/STM32F7xx_HAL_Driver/Inc/Legacy -I../Middlewares/Third_Party/FatFs/src/drivers -I../Drivers/CMSIS/Device/ST/STM32F7xx/Include -I../Middlewares/Third_Party/FatFs/src -I../Drivers/CMSIS/Include -I..\..\..\..\STM32_Project -I..\..\..\STM32F7_Project -I..\..\..\..\LKML_C\Src -I..\..\..\..\LKML_C -I.\RTE\_CNN_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F746xx -DUSE_HAL_DRIVER -DSTM32F746xx --omf_browse=cnn_1\lkml_math.crf ..\..\..\..\LKML_C\Src\LKML_Math.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||i.LK_FullyConnect||, CODE, READONLY, ALIGN=2

LK_FullyConnect PROC
        PUSH     {r4-r12,lr}
        MOV      r4,r3
        MOV      r9,r2
        MOV      r10,r1
        MOV      r7,r0
        LDRD     r5,r11,[sp,#0x28]
        MOV      r8,#0
        B        |L1.70|
        NOP      
|L1.24|
        LDR      r0,[r11,#0]
        MOVS     r6,#0
        STR      r0,[r5,#0]
        B        |L1.56|
|L1.34|
        LDR      r1,[r7,#0]
        LDR      r0,[r4,#0]
        BL       __aeabi_fmul
        LDR      r1,[r5,#0]
        BL       __aeabi_fadd
        ADDS     r4,r4,#4
        STR      r0,[r5,#0]
        ADDS     r6,r6,#1
        ADDS     r7,r7,#4
|L1.56|
        CMP      r6,r9
        BLT      |L1.34|
        ADDS     r5,r5,#4
        SUB      r4,r4,r9,LSL #2
        ADD      r8,r8,#1
|L1.70|
        CMP      r8,r10
        BLT      |L1.24|
        POP      {r4-r12,pc}
        ENDP


        AREA ||i.LK_Padding||, CODE, READONLY, ALIGN=2

LK_Padding PROC
        PUSH     {r4-r7,lr}
        LDR      r6,[sp,#0x14]
        LDR      r4,[sp,#0x1c]
        MUL      r5,r6,r4
        ADD      r3,r3,r5,LSL #2
        ADD      r5,r3,r4,LSL #2
        MOVS     r4,#0
        B        |L2.52|
|L2.22|
        MOVS     r3,#0
        B        |L2.38|
        NOP      
|L2.28|
        LDR      r7,[r0,r3,LSL #2]
        STR      r7,[r5,r3,LSL #2]
        ADDS     r3,r3,#1
|L2.38|
        CMP      r3,r1
        BLT      |L2.28|
        ADDS     r4,r4,#1
        ADD      r5,r5,r6,LSL #2
        ADD      r0,r0,r1,LSL #2
|L2.52|
        CMP      r4,r2
        BLT      |L2.22|
        POP      {r4-r7,pc}
        ENDP


        AREA ||i.LK_Pooling_Max||, CODE, READONLY, ALIGN=2

LK_Pooling_Max PROC
        PUSH     {r0-r11,lr}
        SUB      sp,sp,#0xc
        MOV      r11,r0
        MOVS     r0,#0
        MOV      r10,r3
        MOV      r9,r1
        LDR      r5,[sp,#0x4c]
        STR      r0,[r5,#0]
        STR      r0,[sp,#0]
        B        |L3.138|
        NOP      
|L3.24|
        MOV      r8,#0
        B        |L3.112|
|L3.30|
        MOVS     r4,#0
        B        |L3.78|
        NOP      
|L3.36|
        MUL      r0,r4,r9
        MOVS     r6,#0
        ADD      r0,r11,r0,LSL #2
        STR      r0,[sp,#4]
        B        |L3.72|
|L3.50|
        LDR      r0,[sp,#4]
        LDR      r1,[r5,#0]
        ADD      r7,r0,r6,LSL #2
        LDR      r0,[r7,#0]
        BL       __aeabi_cfrcmple
        BCS      |L3.70|
        LDR      r0,[r7,#0]
        STR      r0,[r5,#0]
|L3.70|
        ADDS     r6,r6,#1
|L3.72|
        CMP      r6,r10
        BLT      |L3.50|
        ADDS     r4,r4,#1
|L3.78|
        LDR      r0,[sp,#0x40]
        CMP      r4,r0
        BLT      |L3.36|
        LDR      r1,[r5,#0]
        LDR      r0,[sp,#0x58]
        BL       __aeabi_fmul
        LDR      r1,[sp,#0x5c]
        BL       __aeabi_fadd
        STM      r5!,{r0}
        LDR      r2,[sp,#0x44]
        MOVS     r1,#0
        ADD      r8,r8,r2
        STR      r1,[r5,#0]
        ADD      r11,r11,r2,LSL #2
|L3.112|
        CMP      r8,r9
        BLT      |L3.30|
        LDR      r0,[sp,#0x48]
        LDR      r2,[sp,#0x48]
        SUBS     r0,r0,#1
        LDR      r1,[sp,#0]
        MUL      r0,r0,r9
        ADD      r1,r1,r2
        STR      r1,[sp,#0]
        ADD      r11,r11,r0,LSL #2
        MOV      r0,r1
|L3.138|
        LDR      r1,[sp,#0x14]
        CMP      r0,r1
        BLT      |L3.24|
        ADD      sp,sp,#0x1c
        POP      {r4-r11,pc}
        ENDP


        AREA ||i.LK_ReLu||, CODE, READONLY, ALIGN=2

LK_ReLu PROC
        PUSH     {r4,lr}
        LDR      r4,|L4.24|
        MOVS     r2,#0
        B        |L4.18|
|L4.8|
        LDR      r3,[r0,#0]
        CMP      r3,r4
        BCC      |L4.16|
        STR      r2,[r0,#0]
|L4.16|
        ADDS     r0,r0,#4
|L4.18|
        SUBS     r1,r1,#1
        BCS      |L4.8|
        POP      {r4,pc}
        ENDP

|L4.24|
        DCD      0x80800000

        AREA ||i.LK_Softmax||, CODE, READONLY, ALIGN=1

LK_Softmax PROC
        PUSH     {r4-r8,lr}
        MOVS     r6,#0
        MOV      r7,r1
        MOV      r4,r0
        MOV      r5,r6
        B        |L5.36|
|L5.14|
        LDR      r0,[r4,#0]
        BL       exp2f
        MOV      r1,r0
        STR      r0,[r4,#0]
        MOV      r0,r6
        BL       __aeabi_fadd
        ADDS     r4,r4,#4
        MOV      r6,r0
        ADDS     r5,r5,#1
|L5.36|
        CMP      r5,r7
        BLT      |L5.14|
        MOVS     r5,#0
        B        |L5.58|
|L5.44|
        LDR      r0,[r4,#-4]!
        MOV      r1,r6
        BL       __aeabi_fdiv
        ADDS     r5,r5,#1
        STR      r0,[r4,#0]
|L5.58|
        CMP      r5,r7
        BLT      |L5.44|
        POP      {r4-r8,pc}
        ENDP


        AREA ||i.LK_ZeroCenter||, CODE, READONLY, ALIGN=1

LK_ZeroCenter PROC
        PUSH     {r4-r6,lr}
        MOV      r6,r2
        MOV      r5,r1
        MOV      r4,r0
        B        |L6.22|
|L6.10|
        LDR      r1,[r5,#0]
        LDR      r0,[r4,#0]
        BL       __aeabi_fadd
        ADDS     r5,r5,#4
        STM      r4!,{r0}
|L6.22|
        SUBS     r6,r6,#1
        BCS      |L6.10|
        POP      {r4-r6,pc}
        ENDP


        AREA ||i.LK_convolutional2D||, CODE, READONLY, ALIGN=2

LK_convolutional2D PROC
        PUSH     {r0-r12,lr}
        MOVS     r0,#0
        MOV      r10,r1
        LDRD     r8,r11,[sp,#0x38]
        LDR      r7,[sp,#0x44]
|L7.14|
        MOV      r9,r0
        LDR      r1,[sp,#0x4c]
        CMP      r0,r1
        BGE      |L7.120|
        MOVS     r6,#0
        B        |L7.108|
|L7.26|
        LDR      r0,[sp,#0x40]
        MOVS     r4,#0
        STR      r0,[r7,#0]
        B        |L7.100|
|L7.34|
        MOVS     r5,#0
        B        |L7.94|
        NOP      
|L7.40|
        MUL      r0,r9,r10
        LDR      r2,[sp,#0]
        MUL      r1,r4,r8
        MUL      r3,r4,r10
        ADD      r2,r2,r0,LSL #2
        LDR      r0,[sp,#0xc]
        ADD      r1,r0,r1,LSL #2
        ADD      r0,r2,r6,LSL #2
        ADD      r0,r0,r3,LSL #2
        LDR      r1,[r1,r5,LSL #2]
        LDR      r0,[r0,r5,LSL #2]
        BL       __aeabi_fmul
        LDR      r1,[r7,#0]
        BL       __aeabi_fadd
        ADDS     r5,r5,#1
        STR      r0,[r7,#0]
|L7.94|
        CMP      r5,r8
        BLT      |L7.40|
        ADDS     r4,r4,#1
|L7.100|
        CMP      r4,r11
        BLT      |L7.34|
        ADDS     r6,r6,#1
        ADDS     r7,r7,#4
|L7.108|
        LDR      r0,[sp,#0x48]
        CMP      r6,r0
        BLT      |L7.26|
        ADD      r0,r9,#1
        B        |L7.14|
|L7.120|
        POP      {r0-r12,pc}
        ENDP


        AREA ||i.LK_convolutional2D_Relu||, CODE, READONLY, ALIGN=2

LK_convolutional2D_Relu PROC
        PUSH     {r0-r12,lr}
        MOVS     r0,#0
        MOV      r10,r1
        LDRD     r8,r11,[sp,#0x38]
        LDR      r5,[sp,#0x44]
|L8.14|
        MOV      r9,r0
        LDR      r1,[sp,#0x4c]
        CMP      r0,r1
        BGE      |L8.132|
        MOVS     r7,#0
        B        |L8.120|
|L8.26|
        LDR      r0,[sp,#0x40]
        MOVS     r4,#0
        STR      r0,[r5,#0]
        B        |L8.100|
|L8.34|
        MOVS     r6,#0
        B        |L8.94|
        NOP      
|L8.40|
        MUL      r0,r9,r10
        LDR      r2,[sp,#0]
        MUL      r1,r4,r8
        MUL      r3,r4,r10
        ADD      r2,r2,r0,LSL #2
        LDR      r0,[sp,#0xc]
        ADD      r1,r0,r1,LSL #2
        ADD      r0,r2,r7,LSL #2
        ADD      r0,r0,r3,LSL #2
        LDR      r1,[r1,r6,LSL #2]
        LDR      r0,[r0,r6,LSL #2]
        BL       __aeabi_fmul
        LDR      r1,[r5,#0]
        BL       __aeabi_fadd
        ADDS     r6,r6,#1
        STR      r0,[r5,#0]
|L8.94|
        CMP      r6,r8
        BLT      |L8.40|
        ADDS     r4,r4,#1
|L8.100|
        CMP      r4,r11
        BLT      |L8.34|
        LDR      r0,[r5,#0]
        CMN      r0,#0x7f800000
        BCC      |L8.116|
        MOVS     r0,#0
        STR      r0,[r5,#0]
|L8.116|
        ADDS     r5,r5,#4
        ADDS     r7,r7,#1
|L8.120|
        LDR      r0,[sp,#0x48]
        CMP      r7,r0
        BLT      |L8.26|
        ADD      r0,r9,#1
        B        |L8.14|
|L8.132|
        POP      {r0-r12,pc}
        ENDP


        AREA ||i.LK_convolutional2D_prepara||, CODE, READONLY, ALIGN=1

LK_convolutional2D_prepara PROC
        PUSH     {r4-r12,lr}
        MOV      r5,r3
        MOV      r4,r0
        MOVS     r0,#0
        LDR      r10,[sp,#0x28]
        LDR      r6,[sp,#0x34]
|L9.16|
        MOV      r11,r0
        LDR      r1,[sp,#0x3c]
        CMP      r0,r1
        BGE      |L9.122|
        MOV      r9,#0
        B        |L9.104|
|L9.30|
        LDR      r0,[sp,#0x30]
        STR      r0,[r6,#0]
        MOVS     r0,#0
        B        |L9.78|
|L9.38|
        MOVS     r7,#0
        B        |L9.64|
|L9.42|
        LDR      r1,[r5,#0]
        LDR      r0,[r4,#0]
        BL       __aeabi_fmul
        LDR      r1,[r6,#0]
        BL       __aeabi_fadd
        ADDS     r4,r4,#4
        STR      r0,[r6,#0]
        ADDS     r5,r5,#4
        ADDS     r7,r7,#1
|L9.64|
        CMP      r7,r10
        BLT      |L9.42|
        LDR      r0,[sp,#0x40]
        ADD      r4,r4,r0,LSL #2
        ADD      r0,r8,#1
|L9.78|
        LDR      r1,[sp,#0x2c]
        MOV      r8,r0
        CMP      r0,r1
        BLT      |L9.38|
        LDR      r0,[sp,#0x44]
        ADDS     r6,r6,#4
        ADD      r9,r9,#1
        SUB      r4,r4,r0,LSL #2
        LDR      r0,[sp,#0x4c]
        SUB      r5,r5,r0,LSL #2
|L9.104|
        LDR      r1,[sp,#0x38]
        CMP      r9,r1
        BLT      |L9.30|
        LDR      r0,[sp,#0x48]
        ADD      r4,r4,r0,LSL #2
        ADD      r0,r11,#1
        B        |L9.16|
|L9.122|
        POP      {r4-r12,pc}
        ENDP


        AREA ||i.LK_matrix_addition||, CODE, READONLY, ALIGN=1

LK_matrix_addition PROC
        PUSH     {r4-r6,lr}
        MOV      r6,r2
        MOV      r5,r1
        MOV      r4,r0
        B        |L10.22|
|L10.10|
        LDR      r1,[r5,#0]
        LDR      r0,[r4,#0]
        BL       __aeabi_fadd
        ADDS     r5,r5,#4
        STM      r4!,{r0}
|L10.22|
        SUBS     r6,r6,#1
        BCS      |L10.10|
        POP      {r4-r6,pc}
        ENDP


        AREA ||i.LK_matrix_multpile||, CODE, READONLY, ALIGN=2

LK_matrix_multpile PROC
        PUSH     {r0-r12,lr}
        MOVS     r4,#0
        MOV      r9,r2
        LDR      r7,[sp,#0x3c]
        B        |L11.94|
|L11.12|
        MOVS     r6,#0
        B        |L11.88|
|L11.16|
        LDR      r1,[sp,#0xc]
        MOVS     r5,#0
        MUL      r0,r4,r7
        MUL      r2,r4,r9
        ADD      r11,r1,r6,LSL #2
        LDR      r1,[sp,#0x40]
        ADD      r1,r1,r0,LSL #2
        LDR      r0,[sp,#0]
        ADD      r8,r1,r6,LSL #2
        ADD      r10,r0,r2,LSL #2
        B        |L11.82|
        NOP      
|L11.52|
        MUL      r0,r5,r7
        LDR      r1,[r11,r0,LSL #2]
        LDR      r0,[r10,r5,LSL #2]
        BL       __aeabi_fmul
        LDR      r1,[r8,#0]
        BL       __aeabi_fadd
        ADDS     r5,r5,#1
        STR      r0,[r8,#0]
|L11.82|
        CMP      r5,r9
        BLT      |L11.52|
        ADDS     r6,r6,#1
|L11.88|
        CMP      r6,r7
        BLT      |L11.16|
        ADDS     r4,r4,#1
|L11.94|
        LDR      r0,[sp,#4]
        CMP      r4,r0
        BLT      |L11.12|
        POP      {r0-r12,pc}
        ENDP


        AREA ||i.LK_maxofMatrix||, CODE, READONLY, ALIGN=1

LK_maxofMatrix PROC
        PUSH     {r4-r8,lr}
        MOVS     r6,#0
        MOV      r7,r1
        MOV      r8,r0
        MOV      r5,r6
        MOV      r4,r6
        B        |L12.36|
|L12.16|
        LDR      r0,[r8,r4,LSL #2]
        MOV      r1,r6
        BL       __aeabi_cfrcmple
        BCS      |L12.34|
        LDR      r6,[r8,r4,LSL #2]
        MOV      r5,r4
|L12.34|
        ADDS     r4,r4,#1
|L12.36|
        CMP      r4,r7
        BLT      |L12.16|
        CMP      r5,#9
        BEQ      |L12.50|
        ADDS     r0,r5,#1
|L12.46|
        POP      {r4-r8,pc}
|L12.50|
        MOVS     r0,#0
        B        |L12.46|
        ENDP


        AREA ||i.LK_sigmoid||, CODE, READONLY, ALIGN=2

LK_sigmoid PROC
        PUSH     {r4-r6,lr}
        MOVS     r4,#0
        MOV      r6,r1
        MOV      r5,r0
        B        |L13.26|
        NOP      
|L13.12|
        LDR      r0,[r5,r4,LSL #2]
        BL       sigmoid
        STR      r0,[r5,r4,LSL #2]
        ADDS     r4,r4,#1
|L13.26|
        CMP      r4,r6
        BLT      |L13.12|
        POP      {r4-r6,pc}
        ENDP


        AREA ||i.ReLU_1||, CODE, READONLY, ALIGN=1

ReLU_1 PROC
        LDR      r0,[r0,#0]
        CMP      r0,#0x800000
        BGE      |L14.10|
        MOVS     r0,#0
|L14.10|
        BX       lr
        ENDP


        AREA ||i.ReLU_2||, CODE, READONLY, ALIGN=1

ReLU_2 PROC
        CMP      r0,#0x800000
        BGE      |L15.8|
        MOVS     r0,#0
|L15.8|
        BX       lr
        ENDP


        AREA ||i.ReLu||, CODE, READONLY, ALIGN=1

ReLu PROC
        MOVS     r0,#0
        BX       lr
        ENDP


        AREA ||i.matrix_multpile||, CODE, READONLY, ALIGN=2

matrix_multpile PROC
        PUSH     {r0-r12,lr}
        MOVS     r4,#0
        MOV      r9,r2
        LDR      r7,[sp,#0x3c]
        B        |L17.94|
|L17.12|
        MOVS     r6,#0
        B        |L17.88|
|L17.16|
        LDR      r1,[sp,#0xc]
        MOVS     r5,#0
        MUL      r0,r4,r7
        MUL      r2,r4,r9
        ADD      r11,r1,r6,LSL #2
        LDR      r1,[sp,#0x40]
        ADD      r1,r1,r0,LSL #2
        LDR      r0,[sp,#0]
        ADD      r8,r1,r6,LSL #2
        ADD      r10,r0,r2,LSL #2
        B        |L17.82|
        NOP      
|L17.52|
        MUL      r0,r5,r7
        LDR      r1,[r11,r0,LSL #2]
        LDR      r0,[r10,r5,LSL #2]
        BL       __aeabi_fmul
        LDR      r1,[r8,#0]
        BL       __aeabi_fadd
        ADDS     r5,r5,#1
        STR      r0,[r8,#0]
|L17.82|
        CMP      r5,r9
        BLT      |L17.52|
        ADDS     r6,r6,#1
|L17.88|
        CMP      r6,r7
        BLT      |L17.16|
        ADDS     r4,r4,#1
|L17.94|
        LDR      r0,[sp,#4]
        CMP      r4,r0
        BLT      |L17.12|
        POP      {r0-r12,pc}
        ENDP


        AREA ||i.maxofMatrix||, CODE, READONLY, ALIGN=1

maxofMatrix PROC
        PUSH     {r4-r8,lr}
        MOVS     r6,#0
        MOV      r7,r1
        MOV      r8,r0
        MOV      r5,r6
        MOV      r4,r6
        B        |L18.36|
|L18.16|
        LDR      r0,[r8,r4,LSL #2]
        MOV      r1,r6
        BL       __aeabi_cfrcmple
        BCS      |L18.34|
        LDR      r6,[r8,r4,LSL #2]
        MOV      r5,r4
|L18.34|
        ADDS     r4,r4,#1
|L18.36|
        CMP      r4,r7
        BLT      |L18.16|
        MOV      r0,r5
        POP      {r4-r8,pc}
        ENDP


        AREA ||i.sigmoid||, CODE, READONLY, ALIGN=1

sigmoid PROC
        EOR      r0,r0,#0x80000000
        PUSH     {r4,lr}
        BL       __aeabi_f2d
        BL       exp
        BL       __aeabi_d2f
        MOV      r4,#0x3f800000
        MOV      r1,r4
        BL       __aeabi_fadd
        MOV      r1,r0
        MOV      r0,r4
        POP      {r4,lr}
        B.W      __aeabi_fdiv
        ENDP


        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        EXPORT LK_FullyConnect [CODE]
        EXPORT LK_Padding [CODE]
        EXPORT LK_Pooling_Max [CODE]
        EXPORT LK_ReLu [CODE]
        EXPORT LK_Softmax [CODE]
        EXPORT LK_ZeroCenter [CODE]
        EXPORT LK_convolutional2D [CODE]
        EXPORT LK_convolutional2D_Relu [CODE]
        EXPORT LK_convolutional2D_prepara [CODE]
        EXPORT LK_matrix_addition [CODE]
        EXPORT LK_matrix_multpile [CODE]
        EXPORT LK_maxofMatrix [CODE]
        EXPORT LK_sigmoid [CODE]
        EXPORT ReLU_1 [CODE]
        EXPORT ReLU_2 [CODE]
        EXPORT ReLu [CODE]
        EXPORT matrix_multpile [CODE]
        EXPORT maxofMatrix [CODE]
        EXPORT sigmoid [CODE]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT __aeabi_f2d [CODE]
        IMPORT exp [CODE]
        IMPORT __aeabi_d2f [CODE]
        IMPORT __aeabi_fadd [CODE]
        IMPORT __aeabi_fdiv [CODE]
        IMPORT __aeabi_cfrcmple [CODE]
        IMPORT __aeabi_fmul [CODE]
        IMPORT exp2f [CODE]

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,3
        ATTR SETSTRING Tag_conformance,"2.09"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
