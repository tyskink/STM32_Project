; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --split_sections --debug -c --asm -ocnn_1\lk_stm32.o --depend=cnn_1\lk_stm32.d --cpu=Cortex-M7 --fpu=SoftVFP --apcs=interwork -O3 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F7xx_HAL_Driver/Inc -I../Drivers/STM32F7xx_HAL_Driver/Inc/Legacy -I../Middlewares/Third_Party/FatFs/src/drivers -I../Drivers/CMSIS/Device/ST/STM32F7xx/Include -I../Middlewares/Third_Party/FatFs/src -I../Drivers/CMSIS/Include -I..\..\..\..\STM32_Project -I..\..\..\STM32F7_Project -I..\..\..\..\LKML_C\Src -I..\..\..\..\LKML_C -I.\RTE\_CNN_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F746xx -DUSE_HAL_DRIVER -DSTM32F746xx --omf_browse=cnn_1\lk_stm32.crf ..\..\..\LK_STM32.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||i.BSP_LED_Init||, CODE, READONLY, ALIGN=1

BSP_LED_Init PROC
        BX       lr
        ENDP


        AREA ||i.BSP_LED_On||, CODE, READONLY, ALIGN=1

BSP_LED_On PROC
        BX       lr
        ENDP


        AREA ||i.CORECheck||, CODE, READONLY, ALIGN=2

        REQUIRE _printf_pre_padding
        REQUIRE _printf_percent
        REQUIRE _printf_flags
        REQUIRE _printf_widthprec
        REQUIRE _printf_x
        REQUIRE _printf_longlong_hex
        REQUIRE _printf_d
        REQUIRE _printf_int_dec
CORECheck PROC
        PUSH     {r4,lr}
        LDR      r0,|L3.128|
        LDR      r4,[r0,#0]
        LDR      r0,|L3.132|
        LDR      r0,[r0,#0]
        MOV      r1,r4
        UBFX     r2,r0,#0,#12
        ADR      r0,|L3.136|
        BL       __2printf
        MOVS     r0,#0x41
        CMP      r0,r4,LSR #24
        AND      r2,r4,#0xf
        UBFX     r1,r4,#20,#4
        BNE      |L3.124|
        MOV      r3,#0xc24
        UBFX     r0,r4,#4,#12
        CMP      r0,r3
        SUB      r3,r0,#0xc24
        BEQ      |L3.110|
        BGT      |L3.76|
        CMP      r0,#0xc20
        BEQ      |L3.94|
        SUB      r0,r0,#0xc00
        SUBS     r0,r0,#0x21
        BEQ      |L3.102|
        CMP      r0,#2
        BNE      |L3.84|
        B        |L3.106|
|L3.76|
        CMP      r3,#3
        BEQ      |L3.114|
        CMP      r3,#0x3c
        BEQ      |L3.98|
|L3.84|
        ADR      r0,|L3.164|
|L3.86|
        POP      {r4,lr}
        B.W      puts
|L3.94|
        ADR      r0,|L3.180|
        B        |L3.116|
|L3.98|
        ADR      r0,|L3.204|
        B        |L3.116|
|L3.102|
        ADR      r0,|L3.228|
        B        |L3.116|
|L3.106|
        ADR      r0,|L3.252|
        B        |L3.116|
|L3.110|
        ADR      r0,|L3.276|
        B        |L3.116|
|L3.114|
        ADR      r0,|L3.300|
|L3.116|
        POP      {r4,lr}
        B.W      __2printf
|L3.124|
        ADR      r0,|L3.324|
        B        |L3.86|
        ENDP

|L3.128|
        DCD      0xe000ed00
|L3.132|
        DCD      0xe0042000
|L3.136|
        DCB      "  CPUID %08X DEVID %03X\r\n",0
        DCB      0
        DCB      0
|L3.164|
        DCB      "  Unknown CORE",0
        DCB      0
|L3.180|
        DCB      "  Cortex M0 r%dp%d\r\n",0
        DCB      0
        DCB      0
        DCB      0
|L3.204|
        DCB      "  Cortex M0+ r%dp%d\r\n",0
        DCB      0
        DCB      0
|L3.228|
        DCB      "  Cortex M1 r%dp%d\r\n",0
        DCB      0
        DCB      0
        DCB      0
|L3.252|
        DCB      "  Cortex M3 r%dp%d\r\n",0
        DCB      0
        DCB      0
        DCB      0
|L3.276|
        DCB      "  Cortex M4 r%dp%d\r\n",0
        DCB      0
        DCB      0
        DCB      0
|L3.300|
        DCB      "  Cortex M7 r%dp%d\r\n",0
        DCB      0
        DCB      0
        DCB      0
|L3.324|
        DCB      "  Unknown CORE IMPLEMENTER",0
        DCB      0

        AREA ||i.FPUCheck||, CODE, READONLY, ALIGN=2

        REQUIRE _printf_pre_padding
        REQUIRE _printf_percent
        REQUIRE _printf_flags
        REQUIRE _printf_widthprec
        REQUIRE _printf_x
        REQUIRE _printf_longlong_hex
FPUCheck PROC
        PUSH     {r1-r5,lr}
        LDR      r0,|L4.80|
        LDR      r4,|L4.80|
        ADDS     r0,r0,#8
        SUBS     r1,r0,#4
        LDR      r0,[r0,#0]
        LDR      r2,[r1,#0]
        LDR      r1,[r4,#0]
        STR      r1,[sp,#0]
        STRD     r2,r0,[sp,#4]
        SUBS     r2,r4,#4
        SUBS     r1,r2,#4
        SUBS     r0,r1,#4
        LDR      r3,[r2,#0]
        LDR      r2,[r1,#0]
        LDR      r1,[r0,#0]
        ADR      r0,|L4.84|
        BL       __2printf
        LDR      r1,|L4.120|
        LDR      r0,[r4,#0]
        ADDS     r0,r0,r1
        BEQ      |L4.64|
        CMP      r0,#0x200
        BEQ      |L4.68|
        POP      {r1-r5,lr}
        ADR      r0,|L4.124|
        B.W      puts
|L4.64|
        ADR      r0,|L4.140|
        B        |L4.70|
|L4.68|
        ADR      r0,|L4.172|
|L4.70|
        POP      {r1-r5,lr}
        B.W      __2printf
        ENDP

        DCW      0x0000
|L4.80|
        DCD      0xe000ef40
|L4.84|
        DCB      " %08X %08X %08X\r\n%08X %08X %08X\r\n",0
        DCB      0
        DCB      0
|L4.120|
        DCD      0xefeeffdf
|L4.124|
        DCB      "  Unknown FPU",0
        DCB      0
        DCB      0
|L4.140|
        DCB      "  FPU-S Single-precision only\r\n",0
|L4.172|
        DCB      "  FPU-D Single-precision and Double-precision\r\n",0

        AREA ||i.LED1_Flash||, CODE, READONLY, ALIGN=1

LED1_Flash PROC
        BX       lr
        ENDP


        AREA ||i.LK_Key1_init||, CODE, READONLY, ALIGN=1

LK_Key1_init PROC
        BX       lr
        ENDP


        AREA ||i.LK_Key1_scanf||, CODE, READONLY, ALIGN=1

LK_Key1_scanf PROC
        BX       lr
        ENDP


        AREA ||i.LK_LED1_init||, CODE, READONLY, ALIGN=1

LK_LED1_init PROC
        BX       lr
        ENDP


        AREA ||i.LK_LED1_off||, CODE, READONLY, ALIGN=1

LK_LED1_off PROC
        BX       lr
        ENDP


        AREA ||i.LK_LED1_on||, CODE, READONLY, ALIGN=1

LK_LED1_on PROC
        BX       lr
        ENDP


        AREA ||i.LK_LED1_toggle||, CODE, READONLY, ALIGN=1

LK_LED1_toggle PROC
        BX       lr
        ENDP


        AREA ||i.LK_Printf||, CODE, READONLY, ALIGN=1

LK_Printf PROC
        BX       lr
        ENDP


        AREA ||i.LK_UART||, CODE, READONLY, ALIGN=1

LK_UART PROC
        PUSH     {r4-r6,lr}
        MOV      r4,r1
        MOV      r5,r0
|L13.6|
        MOVS     r3,#0xff
        MOV      r1,r4
        MOVS     r2,#1
        MOV      r0,r5
        BL       HAL_UART_Transmit
        LDRB     r0,[r4],#1
        CMP      r0,#0
        BNE      |L13.6|
        MOVS     r0,#1
        POP      {r4-r6,pc}
        ENDP


        AREA ||i.MX_USART1_UART_Init||, CODE, READONLY, ALIGN=2

MX_USART1_UART_Init PROC
        LDR      r0,|L14.60|
        MOVS     r1,#0
        PUSH     {r4,lr}
        LDR      r4,|L14.56|
        MOVS     r2,#0xc
        MOV      r3,#0x1c200
        STR      r4,[r0,#0]  ; huart1
        STRD     r3,r1,[r0,#4]
        STR      r1,[r0,#0xc]  ; huart1
        STRD     r1,r2,[r0,#0x10]
        STR      r1,[r0,#0x18]  ; huart1
        STR      r1,[r0,#0x1c]  ; huart1
        STR      r1,[r0,#0x20]  ; huart1
        STR      r1,[r0,#0x24]  ; huart1
        BL       HAL_UART_Init
        CMP      r0,#0
        BEQ      |L14.54|
        POP      {r4,lr}
        MOVS     r1,#0xc4
        ADR      r0,|L14.64|
        B.W      _Error_Handler
|L14.54|
        POP      {r4,pc}
        ENDP

|L14.56|
        DCD      0x40011000
|L14.60|
        DCD      ||.bss||
|L14.64|
        DCB      "..\\..\\..\\LK_STM32.c",0

        AREA ||i.fputc||, CODE, READONLY, ALIGN=2

fputc PROC
        PUSH     {r4,lr}
        STRB     r0,[r1,#0]
        MOVS     r3,#0xff
        MOVS     r2,#1
        MOV      r4,r0
        LDR      r0,|L15.20|
        BL       HAL_UART_Transmit
        MOV      r0,r4
        POP      {r4,pc}
        ENDP

|L15.20|
        DCD      ||.bss||

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.bss||, DATA, NOINIT, ALIGN=2

huart1
        %        112

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\LK_STM32.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_LK_STM32_c_53a75580____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___10_LK_STM32_c_53a75580____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_LK_STM32_c_53a75580____REVSH|
#line 402
|__asm___10_LK_STM32_c_53a75580____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___10_LK_STM32_c_53a75580____RRX|
#line 587
|__asm___10_LK_STM32_c_53a75580____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

        EXPORT BSP_LED_Init [CODE]
        EXPORT BSP_LED_On [CODE]
        EXPORT CORECheck [CODE]
        EXPORT FPUCheck [CODE]
        EXPORT LED1_Flash [CODE]
        EXPORT LK_Key1_init [CODE]
        EXPORT LK_Key1_scanf [CODE]
        EXPORT LK_LED1_init [CODE]
        EXPORT LK_LED1_off [CODE]
        EXPORT LK_LED1_on [CODE]
        EXPORT LK_LED1_toggle [CODE]
        EXPORT LK_Printf [CODE]
        EXPORT LK_UART [CODE]
        EXPORT MX_USART1_UART_Init [CODE]
        EXPORT fputc [CODE]
        EXPORT huart1 [DATA,SIZE=112]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT HAL_UART_Transmit [CODE]
        IMPORT HAL_UART_Init [CODE]
        IMPORT _Error_Handler [CODE]
        IMPORT _printf_pre_padding [CODE]
        IMPORT _printf_percent [CODE]
        IMPORT _printf_flags [CODE]
        IMPORT _printf_widthprec [CODE]
        IMPORT _printf_x [CODE]
        IMPORT _printf_longlong_hex [CODE]
        IMPORT __2printf [CODE]
        IMPORT puts [CODE]
        IMPORT _printf_d [CODE]
        IMPORT _printf_int_dec [CODE]

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,3
        ATTR SETSTRING Tag_conformance,"2.09"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
