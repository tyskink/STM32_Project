; generated by Component: ARM Compiler 5.06 update 4 (build 422) Tool: ArmCC [4d3604]
; commandline ArmCC [--c99 --split_sections --debug -c --asm -ocnn_1\main.o --depend=cnn_1\main.d --cpu=Cortex-M7 --fpu=SoftVFP --apcs=interwork -O0 --diag_suppress=9931 -I../Inc -I../Drivers/STM32F7xx_HAL_Driver/Inc -I../Drivers/STM32F7xx_HAL_Driver/Inc/Legacy -I../Middlewares/Third_Party/FatFs/src/drivers -I../Drivers/CMSIS/Device/ST/STM32F7xx/Include -I../Middlewares/Third_Party/FatFs/src -I../Drivers/CMSIS/Include -I..\..\..\..\STM32_Project -I..\..\..\STM32F7_Project -I..\..\..\..\LKML_C\Src -I..\..\..\..\LKML_C -I.\RTE\_CNN_1 -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F7xx_DFP\2.9.0\Drivers\CMSIS\Device\ST\STM32F7xx\Include -D__MICROLIB -D__UVISION_VERSION=523 -D_RTE_ -DSTM32F746xx -DUSE_HAL_DRIVER -DSTM32F746xx --omf_browse=cnn_1\main.crf ../Src/main.c]
        THUMB
        REQUIRE8
        PRESERVE8

        AREA ||i.LK_HEAP_ERROR||, CODE, READONLY, ALIGN=2

LK_HEAP_ERROR PROC
        PUSH     {r4,lr}
        ADR      r0,|L1.12|
        BL       __2printf
        POP      {r4,pc}
        ENDP

        DCW      0x0000
|L1.12|
        DCB      "NULL From Heap Pointer!!",0
        DCB      0
        DCB      0
        DCB      0

        AREA ||i.MX_GPIO_Init||, CODE, READONLY, ALIGN=2

MX_GPIO_Init PROC
        PUSH     {r3,lr}
        NOP      
        LDR      r0,|L2.136|
        LDR      r0,[r0,#0]
        ORR      r0,r0,#4
        LDR      r1,|L2.136|
        STR      r0,[r1,#0]
        MOV      r0,r1
        LDR      r0,[r0,#0]
        AND      r0,r0,#4
        STR      r0,[sp,#0]
        NOP      
        NOP      
        NOP      
        MOV      r0,r1
        LDR      r0,[r0,#0]
        ORR      r0,r0,#1
        STR      r0,[r1,#0]
        MOV      r0,r1
        LDR      r0,[r0,#0]
        AND      r0,r0,#1
        STR      r0,[sp,#0]
        NOP      
        NOP      
        NOP      
        MOV      r0,r1
        LDR      r0,[r0,#0]
        ORR      r0,r0,#2
        STR      r0,[r1,#0]
        MOV      r0,r1
        LDR      r0,[r0,#0]
        AND      r0,r0,#2
        STR      r0,[sp,#0]
        NOP      
        NOP      
        NOP      
        MOV      r0,r1
        LDR      r0,[r0,#0]
        ORR      r0,r0,#8
        STR      r0,[r1,#0]
        MOV      r0,r1
        LDR      r0,[r0,#0]
        AND      r0,r0,#8
        STR      r0,[sp,#0]
        NOP      
        NOP      
        NOP      
        MOV      r0,r1
        LDR      r0,[r0,#0]
        ORR      r0,r0,#0x80
        STR      r0,[r1,#0]
        MOV      r0,r1
        LDR      r0,[r0,#0]
        AND      r0,r0,#0x80
        STR      r0,[sp,#0]
        NOP      
        NOP      
        POP      {r3,pc}
        ENDP

|L2.136|
        DCD      0x40023830

        AREA ||i.MX_SDMMC1_SD_Init||, CODE, READONLY, ALIGN=2

MX_SDMMC1_SD_Init PROC
        LDR      r0,|L3.28|
        LDR      r1,|L3.32|
        STR      r0,[r1,#0]  ; hsd1
        MOVS     r0,#0
        STR      r0,[r1,#4]  ; hsd1
        MOVS     r1,#0
        LDR      r0,|L3.32|
        STR      r1,[r0,#8]
        STR      r1,[r0,#0xc]
        STR      r1,[r0,#0x10]
        STR      r1,[r0,#0x14]
        STR      r1,[r0,#0x18]
        BX       lr
        ENDP

        DCW      0x0000
|L3.28|
        DCD      0x40012c00
|L3.32|
        DCD      hsd1

        AREA ||i.Model_CNN_ICRSF||, CODE, READONLY, ALIGN=2

        REQUIRE _printf_percent
        REQUIRE _printf_d
        REQUIRE _printf_int_dec
Model_CNN_ICRSF PROC
        PUSH     {r4,lr}
        SUB      sp,sp,#0x9a00
        MOV      r0,#0x1880
        BL       malloc
        ADD      r1,sp,#0x9000
        STR      r0,[r1,#0x5a0]
        MOVS     r2,#1
        ADR      r1,|L4.1040|
        MOV      r0,#0x97d4
        ADD      r0,r0,sp
        BL       f_open
        MOV      r0,#0x2710
        ADD      r1,sp,#0x9000
        STR      r0,[r1,#0x59c]
        MOVS     r1,#0x28
        MOV      r0,#0x9574
        ADD      r0,r0,sp
        BL       __aeabi_memclr4
        MOV      r1,#0x8700
        ADD      r0,sp,#0xe74
        BL       __aeabi_memclr4
        ADR      r1,|L4.1088|
        LDR      r0,|L4.1092|
        BL       LK_UART
        B        |L4.1614|
|L4.82|
        MOVS     r2,#1
        ADR      r1,|L4.1096|
        MOV      r0,#0x95a8
        ADD      r0,r0,sp
        BL       f_open
        MOV      r0,#0xc40
        BL       malloc
        STR      r0,[sp,#0xe48]
        MOV      r3,#0x95a4
        ADD      r3,r3,sp
        MOV      r2,#0xc40
        ADD      r0,sp,#0x9000
        LDR      r1,[r0,#0x5a0]
        ADD      r0,r0,#0x7d4
        BL       f_read
        MOV      r3,#0x95a4
        ADD      r3,r3,sp
        MOV      r2,#0xc40
        ADDS     r0,r3,#4
        LDR      r1,[sp,#0xe48]
        BL       f_read
        MOV      r2,#0x310
        ADD      r0,sp,#0x9000
        LDR      r1,[sp,#0xe48]
        LDR      r0,[r0,#0x5a0]
        BL       LK_ZeroCenter
        LDR      r0,[sp,#0xe48]
        BL       free
        MOV      r0,#0x95a8
        ADD      r0,r0,sp
        BL       f_close
        MOV      r0,#0x900
        BL       malloc
        STR      r0,[sp,#0xe44]
        MOVS     r0,#0x64
        BL       malloc
        STR      r0,[sp,#0xe40]
        MOVS     r0,#0x18
        BL       malloc
        STR      r0,[sp,#0xe3c]
        MOV      r1,#0xd80
        ADD      r0,sp,#0xbc
        BL       __aeabi_memclr4
        MOVS     r2,#1
        ADR      r1,|L4.1120|
        MOV      r0,#0x95a8
        ADD      r0,r0,sp
        BL       f_open
        MOV      r3,#0x95a4
        ADD      r3,r3,sp
        MOVS     r2,#0x18
        ADDS     r0,r3,#4
        LDR      r1,[sp,#0xe3c]
        BL       f_read
        MOV      r0,#0x95a8
        ADD      r0,r0,sp
        BL       f_close
        MOVS     r2,#1
        ADR      r1,|L4.1148|
        MOV      r0,#0x95a8
        ADD      r0,r0,sp
        BL       f_open
        MOV      r3,#0x95a4
        ADD      r3,r3,sp
        MOVS     r2,#0x64
        ADDS     r0,r3,#4
        LDR      r1,[sp,#0xe40]
        BL       f_read
        MOVS     r1,#0
        MOVS     r2,#0x18
        LDR      r0,[sp,#0xe44]
        STRD     r0,r2,[sp,#0xc]
        STRD     r2,r1,[sp,#0x14]
        LDR      r0,[sp,#0xe3c]
        LDR      r0,[r0,#0]
        MOVS     r1,#5
        STR      r1,[sp,#0]
        STRD     r1,r0,[sp,#4]
        MOVS     r2,#0x1c
        MOV      r1,r2
        ADD      r0,sp,#0x9000
        LDR      r3,[sp,#0xe40]
        LDR      r0,[r0,#0x5a0]
        BL       LK_convolutional2D
        MOV      r1,#0x240
        LDR      r0,[sp,#0xe44]
        BL       LK_ReLu
        MOVS     r0,#0
        MOV      r1,#0x3f800000
        MOVS     r2,#0xc
        STR      r2,[sp,#0x10]
        STRD     r2,r1,[sp,#0x14]
        STR      r0,[sp,#0x1c]
        ADD      r0,sp,#0xbc
        MOVS     r1,#2
        STR      r1,[sp,#0]
        STR      r1,[sp,#4]
        MOV      r3,r1
        MOVS     r2,#0x18
        STRD     r1,r0,[sp,#8]
        MOV      r1,r2
        LDR      r0,[sp,#0xe44]
        BL       LK_Pooling_Max
        MOV      r0,#0x95a8
        ADD      r0,r0,sp
        BL       f_close
        MOVS     r2,#1
        ADR      r1,|L4.1176|
        MOV      r0,#0x95a8
        ADD      r0,r0,sp
        BL       f_open
        MOV      r3,#0x95a4
        ADD      r3,r3,sp
        MOVS     r2,#0x64
        ADDS     r0,r3,#4
        LDR      r1,[sp,#0xe40]
        BL       f_read
        MOVS     r1,#0
        MOVS     r2,#0x18
        LDR      r0,[sp,#0xe44]
        STRD     r0,r2,[sp,#0xc]
        STRD     r2,r1,[sp,#0x14]
        LDR      r0,[sp,#0xe3c]
        LDR      r0,[r0,#4]
        MOVS     r1,#5
        STR      r1,[sp,#0]
        STRD     r1,r0,[sp,#4]
        MOVS     r2,#0x1c
        MOV      r1,r2
        ADD      r0,sp,#0x9000
        LDR      r3,[sp,#0xe40]
        LDR      r0,[r0,#0x5a0]
        BL       LK_convolutional2D
        MOV      r1,#0x240
        LDR      r0,[sp,#0xe44]
        BL       LK_ReLu
        MOVS     r0,#0
        MOV      r1,#0x3f800000
        MOVS     r2,#0xc
        STR      r2,[sp,#0x10]
        STRD     r2,r1,[sp,#0x14]
        STR      r0,[sp,#0x1c]
        ADD      r0,sp,#0x2fc
        MOVS     r1,#2
        STR      r1,[sp,#0]
        STR      r1,[sp,#4]
        MOV      r3,r1
        MOVS     r2,#0x18
        STRD     r1,r0,[sp,#8]
        MOV      r1,r2
        LDR      r0,[sp,#0xe44]
        BL       LK_Pooling_Max
        MOV      r0,#0x95a8
        ADD      r0,r0,sp
        BL       f_close
        MOVS     r2,#1
        ADR      r1,|L4.1204|
        MOV      r0,#0x95a8
        ADD      r0,r0,sp
        BL       f_open
        MOV      r3,#0x95a4
        ADD      r3,r3,sp
        MOVS     r2,#0x64
        ADDS     r0,r3,#4
        LDR      r1,[sp,#0xe40]
        BL       f_read
        MOVS     r1,#0
        MOVS     r2,#0x18
        LDR      r0,[sp,#0xe44]
        STRD     r0,r2,[sp,#0xc]
        STRD     r2,r1,[sp,#0x14]
        LDR      r0,[sp,#0xe3c]
        LDR      r0,[r0,#8]
        MOVS     r1,#5
        STR      r1,[sp,#0]
        STRD     r1,r0,[sp,#4]
        MOVS     r2,#0x1c
        MOV      r1,r2
        ADD      r0,sp,#0x9000
        LDR      r3,[sp,#0xe40]
        LDR      r0,[r0,#0x5a0]
        BL       LK_convolutional2D
        MOV      r1,#0x240
        LDR      r0,[sp,#0xe44]
        BL       LK_ReLu
        MOVS     r0,#0
        MOV      r1,#0x3f800000
        MOVS     r2,#0xc
        STR      r2,[sp,#0x10]
        STRD     r2,r1,[sp,#0x14]
        STR      r0,[sp,#0x1c]
        ADD      r0,sp,#0x53c
        MOVS     r1,#2
        STR      r1,[sp,#0]
        STR      r1,[sp,#4]
        MOV      r3,r1
        MOVS     r2,#0x18
        STRD     r1,r0,[sp,#8]
        MOV      r1,r2
        LDR      r0,[sp,#0xe44]
        BL       LK_Pooling_Max
        MOV      r0,#0x95a8
        ADD      r0,r0,sp
        BL       f_close
        MOVS     r2,#1
        ADR      r1,|L4.1232|
        MOV      r0,#0x95a8
        ADD      r0,r0,sp
        BL       f_open
        MOV      r3,#0x95a4
        ADD      r3,r3,sp
        MOVS     r2,#0x64
        ADDS     r0,r3,#4
        LDR      r1,[sp,#0xe40]
        BL       f_read
        MOVS     r1,#0
        MOVS     r2,#0x18
        LDR      r0,[sp,#0xe44]
        STRD     r0,r2,[sp,#0xc]
        STRD     r2,r1,[sp,#0x14]
        LDR      r0,[sp,#0xe3c]
        LDR      r0,[r0,#0xc]
        MOVS     r1,#5
        STR      r1,[sp,#0]
        STRD     r1,r0,[sp,#4]
        MOVS     r2,#0x1c
        MOV      r1,r2
        ADD      r0,sp,#0x9000
        LDR      r3,[sp,#0xe40]
        LDR      r0,[r0,#0x5a0]
        BL       LK_convolutional2D
        MOV      r1,#0x240
        LDR      r0,[sp,#0xe44]
        BL       LK_ReLu
        MOVS     r0,#0
        MOV      r1,#0x3f800000
        MOVS     r2,#0xc
        STR      r2,[sp,#0x10]
        STRD     r2,r1,[sp,#0x14]
        STR      r0,[sp,#0x1c]
        ADD      r0,sp,#0x77c
        MOVS     r1,#2
        STR      r1,[sp,#0]
        STR      r1,[sp,#4]
        MOV      r3,r1
        MOVS     r2,#0x18
        STRD     r1,r0,[sp,#8]
        MOV      r1,r2
        LDR      r0,[sp,#0xe44]
        BL       LK_Pooling_Max
        MOV      r0,#0x95a8
        ADD      r0,r0,sp
        BL       f_close
        MOVS     r2,#1
        ADR      r1,|L4.1260|
        MOV      r0,#0x95a8
        ADD      r0,r0,sp
        BL       f_open
        MOV      r3,#0x95a4
        ADD      r3,r3,sp
        MOVS     r2,#0x64
        ADDS     r0,r3,#4
        LDR      r1,[sp,#0xe40]
        BL       f_read
        MOVS     r1,#0
        MOVS     r2,#0x18
        LDR      r0,[sp,#0xe44]
        STRD     r0,r2,[sp,#0xc]
        STRD     r2,r1,[sp,#0x14]
        LDR      r0,[sp,#0xe3c]
        LDR      r0,[r0,#0x10]
        MOVS     r1,#5
        STR      r1,[sp,#0]
        STRD     r1,r0,[sp,#4]
        MOVS     r2,#0x1c
        MOV      r1,r2
        ADD      r0,sp,#0x9000
        LDR      r3,[sp,#0xe40]
        LDR      r0,[r0,#0x5a0]
        BL       LK_convolutional2D
        MOV      r1,#0x240
        LDR      r0,[sp,#0xe44]
        BL       LK_ReLu
        MOVS     r0,#0
        MOV      r1,#0x3f800000
        MOVS     r2,#0xc
        STR      r2,[sp,#0x10]
        STRD     r2,r1,[sp,#0x14]
        STR      r0,[sp,#0x1c]
        ADD      r0,sp,#0x9bc
        MOVS     r1,#2
        STR      r1,[sp,#0]
        STR      r1,[sp,#4]
        MOV      r3,r1
        MOVS     r2,#0x18
        STRD     r1,r0,[sp,#8]
        MOV      r1,r2
        LDR      r0,[sp,#0xe44]
        BL       LK_Pooling_Max
        MOV      r0,#0x95a8
        ADD      r0,r0,sp
        BL       f_close
        MOVS     r2,#1
        ADR      r1,|L4.1288|
        MOV      r0,#0x95a8
        ADD      r0,r0,sp
        BL       f_open
        MOV      r3,#0x95a4
        ADD      r3,r3,sp
        MOVS     r2,#0x64
        ADDS     r0,r3,#4
        B        |L4.1316|
        DCW      0x0000
|L4.1040|
        DCB      "DataSet/MNIST_test_features_10000_784_scale.lkf",0
|L4.1088|
        DCB      "{A",0
        DCB      0
|L4.1092|
        DCD      huart1
|L4.1096|
        DCB      "CNN_ZcCoReSuFuSm/Zc.lkf",0
|L4.1120|
        DCB      "CNN_ZcCoReSuFuSm/C1B.lkf",0
        DCB      0
        DCB      0
        DCB      0
|L4.1148|
        DCB      "CNN_ZcCoReSuFuSm/C1K1.lkf",0
        DCB      0
        DCB      0
|L4.1176|
        DCB      "CNN_ZcCoReSuFuSm/C1K2.lkf",0
        DCB      0
        DCB      0
|L4.1204|
        DCB      "CNN_ZcCoReSuFuSm/C1K3.lkf",0
        DCB      0
        DCB      0
|L4.1232|
        DCB      "CNN_ZcCoReSuFuSm/C1K4.lkf",0
        DCB      0
        DCB      0
|L4.1260|
        DCB      "CNN_ZcCoReSuFuSm/C1K5.lkf",0
        DCB      0
        DCB      0
|L4.1288|
        DCB      "CNN_ZcCoReSuFuSm/C1K6.lkf",0
        DCB      0
        DCB      0
|L4.1316|
        LDR      r1,[sp,#0xe40]
        BL       f_read
        MOVS     r1,#0
        MOVS     r2,#0x18
        LDR      r0,[sp,#0xe44]
        STRD     r0,r2,[sp,#0xc]
        STRD     r2,r1,[sp,#0x14]
        LDR      r0,[sp,#0xe3c]
        LDR      r0,[r0,#0x14]
        MOVS     r1,#5
        STR      r1,[sp,#0]
        STRD     r1,r0,[sp,#4]
        MOVS     r2,#0x1c
        MOV      r1,r2
        ADD      r0,sp,#0x9000
        LDR      r3,[sp,#0xe40]
        LDR      r0,[r0,#0x5a0]
        BL       LK_convolutional2D
        MOV      r1,#0x240
        LDR      r0,[sp,#0xe44]
        BL       LK_ReLu
        MOVS     r0,#0
        MOV      r1,#0x3f800000
        MOVS     r2,#0xc
        STR      r2,[sp,#0x10]
        STRD     r2,r1,[sp,#0x14]
        STR      r0,[sp,#0x1c]
        ADD      r0,sp,#0xbfc
        MOVS     r1,#2
        STR      r1,[sp,#0]
        STR      r1,[sp,#4]
        MOV      r3,r1
        MOVS     r2,#0x18
        STRD     r1,r0,[sp,#8]
        MOV      r1,r2
        LDR      r0,[sp,#0xe44]
        BL       LK_Pooling_Max
        MOV      r0,#0x95a8
        ADD      r0,r0,sp
        BL       f_close
        LDR      r0,[sp,#0xe40]
        BL       free
        LDR      r0,[sp,#0xe3c]
        BL       free
        LDR      r0,[sp,#0xe44]
        BL       free
        MOVS     r2,#1
        ADR      r1,|L4.1652|
        MOV      r0,#0x95a8
        ADD      r0,r0,sp
        BL       f_open
        MOV      r3,#0x95a4
        ADD      r3,r3,sp
        MOV      r2,#0x8700
        ADD      r1,sp,#0xe74
        ADDS     r0,r3,#4
        BL       f_read
        MOV      r0,#0x95a8
        ADD      r0,r0,sp
        BL       f_close
        MOVS     r2,#1
        ADR      r1,|L4.1680|
        MOV      r0,#0x95a8
        ADD      r0,r0,sp
        BL       f_open
        MOV      r3,#0x95a4
        ADD      r3,r3,sp
        MOVS     r2,#0x28
        ADD      r1,sp,#0xe4c
        ADDS     r0,r3,#4
        BL       f_read
        MOV      r0,#0x95a8
        ADD      r0,r0,sp
        BL       f_close
        ADD      r0,sp,#0xe4c
        MOV      r1,#0x9574
        ADD      r1,r1,sp
        ADD      r3,sp,#0xbc
        MOV      r2,#0x360
        STRD     r1,r0,[sp,#0]
        MOVS     r1,#0xa
        ADDS     r0,r0,#0x28
        BL       LK_FullyConnect
        MOVS     r1,#0xa
        MOV      r0,#0x9574
        ADD      r0,r0,sp
        BL       LK_Softmax
        MOVS     r1,#0xa
        MOV      r0,#0x9574
        ADD      r0,r0,sp
        BL       maxofMatrix
        MOV      r1,r0
        STR      r0,[sp,#0xb8]
        ADR      r0,|L4.1708|
        BL       __2printf
        NOP      
|L4.1614|
        ADD      r0,sp,#0x9000
        LDR      r1,[r0,#0x59c]
        SUBS     r0,r1,#1
        ADD      r2,sp,#0x9000
        STR      r0,[r2,#0x59c]
        CMP      r1,#0
        BNE      |L4.82|
        ADR      r1,|L4.1724|
        LDR      r0,|L4.1728|
        BL       LK_UART
        ADD      sp,sp,#0x9a00
        POP      {r4,pc}
        ENDP

|L4.1652|
        DCB      "CNN_ZcCoReSuFuSm/F5W.lkf",0
        DCB      0
        DCB      0
        DCB      0
|L4.1680|
        DCB      "CNN_ZcCoReSuFuSm/F5B.lkf",0
        DCB      0
        DCB      0
        DCB      0
|L4.1708|
        DCB      "\tResult is: %d",0
        DCB      0
|L4.1724|
        DCB      "{Z",0
        DCB      0
|L4.1728|
        DCD      huart1

        AREA ||i.SCB_EnableDCache||, CODE, READONLY, ALIGN=2

SCB_EnableDCache PROC
        PUSH     {r4,lr}
        MOVS     r3,#0
        LDR      r4,|L5.148|
        STR      r3,[r4,#0]
        NOP      
        NOP      
        NOP      
        DSB      
        NOP      
        NOP      
        NOP      
        SUBS     r3,r4,#4
        LDR      r0,[r3,#0]
        UBFX     r1,r0,#13,#15
        NOP      
|L5.34|
        UBFX     r2,r0,#3,#10
        NOP      
|L5.40|
        MOV      r3,#0x3fe0
        AND      r3,r3,r1,LSL #5
        MOV      r4,#0xc0000000
        AND      r4,r4,r2,LSL #30
        ORRS     r3,r3,r4
        LDR      r4,|L5.152|
        STR      r3,[r4,#0]
        NOP      
        NOP      
        SUBS     r3,r2,#0
        SUB      r2,r2,#1
        BNE      |L5.40|
        SUBS     r3,r1,#0
        SUB      r1,r1,#1
        BNE      |L5.34|
        NOP      
        NOP      
        NOP      
        DSB      
        NOP      
        NOP      
        NOP      
        LDR      r3,|L5.148|
        SUBS     r3,r3,#0x70
        LDR      r3,[r3,#0]
        ORR      r3,r3,#0x10000
        LDR      r4,|L5.148|
        SUBS     r4,r4,#0x70
        STR      r3,[r4,#0]
        NOP      
        NOP      
        NOP      
        DSB      
        NOP      
        NOP      
        NOP      
        NOP      
        NOP      
        NOP      
        ISB      
        NOP      
        NOP      
        NOP      
        POP      {r4,pc}
        ENDP

|L5.148|
        DCD      0xe000ed84
|L5.152|
        DCD      0xe000ef60

        AREA ||i.SystemClock_Config||, CODE, READONLY, ALIGN=2

SystemClock_Config PROC
        PUSH     {r4,lr}
        SUB      sp,sp,#0xd0
        NOP      
        LDR      r0,|L6.240|
        LDR      r0,[r0,#0]
        ORR      r0,r0,#0x10000000
        LDR      r1,|L6.240|
        STR      r0,[r1,#0]
        MOV      r0,r1
        LDR      r0,[r0,#0]
        AND      r0,r0,#0x10000000
        STR      r0,[sp,#4]
        NOP      
        NOP      
        NOP      
        LDR      r0,|L6.244|
        LDR      r0,[r0,#0]
        ORR      r0,r0,#0xc000
        LDR      r1,|L6.244|
        STR      r0,[r1,#0]
        MOV      r0,r1
        LDR      r0,[r0,#0]
        AND      r0,r0,#0xc000
        STR      r0,[sp,#4]
        NOP      
        NOP      
        MOVS     r0,#1
        STR      r0,[sp,#0xa0]
        LSLS     r0,r0,#16
        STR      r0,[sp,#0xa4]
        MOVS     r0,#2
        STR      r0,[sp,#0xb8]
        LSLS     r1,r0,#21
        ADD      r0,sp,#0xa0
        STR      r1,[r0,#0x1c]
        MOVS     r1,#0x19
        STR      r1,[r0,#0x20]
        MOV      r1,#0x1b0
        STR      r1,[r0,#0x24]
        MOVS     r1,#2
        STR      r1,[r0,#0x28]
        MOVS     r1,#9
        STR      r1,[r0,#0x2c]
        BL       HAL_RCC_OscConfig
        CBZ      r0,|L6.112|
        MOV      r1,#0x119
        ADR      r0,|L6.248|
        BL       _Error_Handler
|L6.112|
        BL       HAL_PWREx_EnableOverDrive
        CBZ      r0,|L6.128|
        MOV      r1,#0x120
        ADR      r0,|L6.248|
        BL       _Error_Handler
|L6.128|
        MOVS     r0,#0xf
        STR      r0,[sp,#0x8c]
        MOVS     r0,#2
        STR      r0,[sp,#0x90]
        MOVS     r0,#0
        STR      r0,[sp,#0x94]
        MOV      r0,#0x1400
        STR      r0,[sp,#0x98]
        MOV      r0,#0x1000
        STR      r0,[sp,#0x9c]
        MOVS     r1,#7
        ADD      r0,sp,#0x8c
        BL       HAL_RCC_ClockConfig
        CBZ      r0,|L6.172|
        MOV      r1,#0x12e
        ADR      r0,|L6.248|
        BL       _Error_Handler
|L6.172|
        LDR      r0,|L6.264|
        STR      r0,[sp,#8]
        MOVS     r0,#0
        STR      r0,[sp,#0x4c]
        STR      r0,[sp,#0x84]
        STR      r0,[sp,#0x88]
        ADD      r0,sp,#8
        BL       HAL_RCCEx_PeriphCLKConfig
        CBZ      r0,|L6.202|
        MOV      r1,#0x138
        ADR      r0,|L6.248|
        BL       _Error_Handler
|L6.202|
        BL       HAL_RCC_GetHCLKFreq
        MOV      r1,#0x3e8
        UDIV     r4,r0,r1
        MOV      r0,r4
        BL       HAL_SYSTICK_Config
        MOVS     r0,#4
        BL       HAL_SYSTICK_CLKSourceConfig
        MOVS     r2,#0
        MOV      r1,r2
        SUBS     r0,r2,#1
        BL       HAL_NVIC_SetPriority
        ADD      sp,sp,#0xd0
        POP      {r4,pc}
        ENDP

|L6.240|
        DCD      0x40023840
|L6.244|
        DCD      0x40007000
|L6.248|
        DCB      "../Src/main.c",0
        DCB      0
        DCB      0
|L6.264|
        DCD      0x00a00040

        AREA ||i._Error_Handler||, CODE, READONLY, ALIGN=1

_Error_Handler PROC
        NOP      
|L7.2|
        B        |L7.2|
        ENDP


        AREA ||i.heaptest||, CODE, READONLY, ALIGN=2

        REQUIRE _printf_percent
        REQUIRE _printf_d
        REQUIRE _printf_int_dec
heaptest PROC
        PUSH     {r4-r6,lr}
        MOV      r0,#0x1000
        BL       malloc
        MOV      r4,r0
        MOV      r5,#0x400
        B        |L8.30|
|L8.18|
        STR      r5,[r4,#0]
        ADR      r0,|L8.48|
        LDR      r1,[r4,#0]
        BL       __2printf
        ADDS     r4,r4,#4
|L8.30|
        SUBS     r0,r5,#0
        SUB      r5,r5,#1
        BNE      |L8.18|
        MOV      r0,r4
        BL       free
        POP      {r4-r6,pc}
        ENDP

        DCW      0x0000
|L8.48|
        DCB      "%d",0
        DCB      0

        AREA ||i.main||, CODE, READONLY, ALIGN=2

main PROC
        NOP      
        NOP      
        NOP      
        NOP      
        NOP      
        DSB      
        NOP      
        NOP      
        NOP      
        NOP      
        NOP      
        NOP      
        ISB      
        NOP      
        NOP      
        NOP      
        MOVS     r0,#0
        LDR      r1,|L9.124|
        STR      r0,[r1,#0]
        LDR      r0,|L9.128|
        LDR      r0,[r0,#0]
        ORR      r0,r0,#0x20000
        LDR      r1,|L9.128|
        STR      r0,[r1,#0]
        NOP      
        NOP      
        NOP      
        DSB      
        NOP      
        NOP      
        NOP      
        NOP      
        NOP      
        NOP      
        ISB      
        NOP      
        NOP      
        NOP      
        NOP      
        BL       SCB_EnableDCache
        BL       HAL_Init
        BL       SystemClock_Config
        BL       MX_GPIO_Init
        BL       MX_USART1_UART_Init
        BL       MX_SDMMC1_SD_Init
        BL       testSD_UART
        BL       Model_CNN_ICRSF
        NOP      
|L9.122|
        B        |L9.122|
        ENDP

|L9.124|
        DCD      0xe000ef50
|L9.128|
        DCD      0xe000ed14

        AREA ||.arm_vfe_header||, DATA, READONLY, NOALLOC, ALIGN=2

        DCD      0x00000000

        AREA ||.bss||, DATA, NOINIT, ALIGN=2

hsd1
        %        132

;*** Start embedded assembler ***

#line 1 "../Src/main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_cc0d4de8____REV16|
#line 388 "../Drivers/CMSIS/Include/cmsis_armcc.h"
|__asm___6_main_c_cc0d4de8____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_cc0d4de8____REVSH|
#line 402
|__asm___6_main_c_cc0d4de8____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_cc0d4de8____RRX|
#line 587
|__asm___6_main_c_cc0d4de8____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

__ARM_use_no_argv EQU 0

        EXPORT __ARM_use_no_argv
        EXPORT LK_HEAP_ERROR [CODE]
        EXPORT Model_CNN_ICRSF [CODE]
        EXPORT SystemClock_Config [CODE]
        EXPORT _Error_Handler [CODE]
        EXPORT heaptest [CODE]
        EXPORT main [CODE]
        EXPORT hsd1 [DATA,SIZE=132]

        IMPORT ||Lib$$Request$$armlib|| [CODE,WEAK]
        IMPORT __2printf [CODE]
        IMPORT malloc [CODE]
        IMPORT f_open [CODE]
        IMPORT __aeabi_memclr4 [CODE]
        IMPORT LK_UART [CODE]
        IMPORT f_read [CODE]
        IMPORT LK_ZeroCenter [CODE]
        IMPORT free [CODE]
        IMPORT f_close [CODE]
        IMPORT LK_convolutional2D [CODE]
        IMPORT LK_ReLu [CODE]
        IMPORT LK_Pooling_Max [CODE]
        IMPORT LK_FullyConnect [CODE]
        IMPORT LK_Softmax [CODE]
        IMPORT maxofMatrix [CODE]
        IMPORT _printf_percent [CODE]
        IMPORT _printf_d [CODE]
        IMPORT _printf_int_dec [CODE]
        IMPORT huart1 [DATA]
        IMPORT HAL_RCC_OscConfig [CODE]
        IMPORT HAL_PWREx_EnableOverDrive [CODE]
        IMPORT HAL_RCC_ClockConfig [CODE]
        IMPORT HAL_RCCEx_PeriphCLKConfig [CODE]
        IMPORT HAL_RCC_GetHCLKFreq [CODE]
        IMPORT HAL_SYSTICK_Config [CODE]
        IMPORT HAL_SYSTICK_CLKSourceConfig [CODE]
        IMPORT HAL_NVIC_SetPriority [CODE]
        IMPORT HAL_Init [CODE]
        IMPORT MX_USART1_UART_Init [CODE]
        IMPORT testSD_UART [CODE]

        KEEP MX_GPIO_Init
        KEEP MX_SDMMC1_SD_Init
        KEEP SCB_EnableDCache

        ATTR FILESCOPE
        ATTR SETVALUE Tag_ABI_PCS_wchar_t,2
        ATTR SETVALUE Tag_ABI_enum_size,1
        ATTR SETVALUE Tag_ABI_optimization_goals,6
        ATTR SETSTRING Tag_conformance,"2.09"
        ATTR SETVALUE AV,18,1

        ASSERT {ENDIAN} = "little"
        ASSERT {INTER} = {TRUE}
        ASSERT {ROPI} = {FALSE}
        ASSERT {RWPI} = {FALSE}
        ASSERT {IEEE_FULL} = {FALSE}
        ASSERT {IEEE_PART} = {FALSE}
        ASSERT {IEEE_JAVA} = {FALSE}
        END
